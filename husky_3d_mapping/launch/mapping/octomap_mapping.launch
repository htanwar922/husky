<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
	<arg name="base_frame" default="world" />
	<arg name="map_file" default="" />
	
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.05" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="$(arg base_frame)" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="5.0" />

		<!-- saved map file to be loaded -->
		<param name="map_file" command="bash -c 'test -f $(arg map_file) &amp;&amp; printf $(arg map_file) || printf &quot;&quot;'" />
			<!-- value="$(eval 'test -e ' + arg('map_file') and arg('map_file') or &quot;&quot;)" -->
		
		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/camera/depth/points" />
	
	</node>
</launch>
